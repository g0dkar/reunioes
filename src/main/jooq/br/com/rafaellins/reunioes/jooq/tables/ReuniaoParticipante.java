/*
 * This file is generated by jOOQ.
 */
package br.com.rafaellins.reunioes.jooq.tables;


import br.com.rafaellins.reunioes.jooq.Keys;
import br.com.rafaellins.reunioes.jooq.Public;
import br.com.rafaellins.reunioes.jooq.tables.records.ReuniaoParticipanteRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ReuniaoParticipante extends TableImpl<ReuniaoParticipanteRecord> {

    private static final long serialVersionUID = -8112906;

    /**
     * The reference instance of <code>public.reuniao_participante</code>
     */
    public static final ReuniaoParticipante REUNIAO_PARTICIPANTE = new ReuniaoParticipante();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReuniaoParticipanteRecord> getRecordType() {
        return ReuniaoParticipanteRecord.class;
    }

    /**
     * The column <code>public.reuniao_participante.reuniao_id</code>.
     */
    public final TableField<ReuniaoParticipanteRecord, UUID> REUNIAO_ID = createField(DSL.name("reuniao_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.reuniao_participante.participante_id</code>.
     */
    public final TableField<ReuniaoParticipanteRecord, UUID> PARTICIPANTE_ID = createField(DSL.name("participante_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>public.reuniao_participante</code> table reference
     */
    public ReuniaoParticipante() {
        this(DSL.name("reuniao_participante"), null);
    }

    /**
     * Create an aliased <code>public.reuniao_participante</code> table reference
     */
    public ReuniaoParticipante(String alias) {
        this(DSL.name(alias), REUNIAO_PARTICIPANTE);
    }

    /**
     * Create an aliased <code>public.reuniao_participante</code> table reference
     */
    public ReuniaoParticipante(Name alias) {
        this(alias, REUNIAO_PARTICIPANTE);
    }

    private ReuniaoParticipante(Name alias, Table<ReuniaoParticipanteRecord> aliased) {
        this(alias, aliased, null);
    }

    private ReuniaoParticipante(Name alias, Table<ReuniaoParticipanteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ReuniaoParticipante(Table<O> child, ForeignKey<O, ReuniaoParticipanteRecord> key) {
        super(child, key, REUNIAO_PARTICIPANTE);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<ForeignKey<ReuniaoParticipanteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ReuniaoParticipanteRecord, ?>>asList(Keys.REUNIAO_PARTICIPANTE__FK_REL_REUNIAO_PARTICIPANTE___REUNIAO, Keys.REUNIAO_PARTICIPANTE__FK_REL_REUNIAO_PARTICIPANTE___PARTICIPANTE);
    }

    public Reuniao reuniao() {
        return new Reuniao(this, Keys.REUNIAO_PARTICIPANTE__FK_REL_REUNIAO_PARTICIPANTE___REUNIAO);
    }

    public Participante participante() {
        return new Participante(this, Keys.REUNIAO_PARTICIPANTE__FK_REL_REUNIAO_PARTICIPANTE___PARTICIPANTE);
    }

    @Override
    public ReuniaoParticipante as(String alias) {
        return new ReuniaoParticipante(DSL.name(alias), this);
    }

    @Override
    public ReuniaoParticipante as(Name alias) {
        return new ReuniaoParticipante(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReuniaoParticipante rename(String name) {
        return new ReuniaoParticipante(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReuniaoParticipante rename(Name name) {
        return new ReuniaoParticipante(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<UUID, UUID> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
