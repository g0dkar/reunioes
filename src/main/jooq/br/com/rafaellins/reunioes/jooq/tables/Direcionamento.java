/*
 * This file is generated by jOOQ.
 */
package br.com.rafaellins.reunioes.jooq.tables;


import br.com.rafaellins.reunioes.jooq.Keys;
import br.com.rafaellins.reunioes.jooq.Public;
import br.com.rafaellins.reunioes.jooq.tables.records.DirecionamentoRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Direcionamento extends TableImpl<DirecionamentoRecord> {

    private static final long serialVersionUID = 257350690;

    /**
     * The reference instance of <code>public.direcionamento</code>
     */
    public static final Direcionamento DIRECIONAMENTO = new Direcionamento();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DirecionamentoRecord> getRecordType() {
        return DirecionamentoRecord.class;
    }

    /**
     * The column <code>public.direcionamento.id</code>.
     */
    public final TableField<DirecionamentoRecord, UUID> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.direcionamento.participante_id</code>.
     */
    public final TableField<DirecionamentoRecord, UUID> PARTICIPANTE_ID = createField(DSL.name("participante_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.direcionamento.ordem</code>.
     */
    public final TableField<DirecionamentoRecord, Integer> ORDEM = createField(DSL.name("ordem"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.direcionamento.direcionamento</code>.
     */
    public final TableField<DirecionamentoRecord, String> DIRECIONAMENTO_ = createField(DSL.name("direcionamento"), org.jooq.impl.SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>public.direcionamento.prazo</code>.
     */
    public final TableField<DirecionamentoRecord, OffsetDateTime> PRAZO = createField(DSL.name("prazo"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.direcionamento.data_hora_criacao</code>.
     */
    public final TableField<DirecionamentoRecord, OffsetDateTime> DATA_HORA_CRIACAO = createField(DSL.name("data_hora_criacao"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * Create a <code>public.direcionamento</code> table reference
     */
    public Direcionamento() {
        this(DSL.name("direcionamento"), null);
    }

    /**
     * Create an aliased <code>public.direcionamento</code> table reference
     */
    public Direcionamento(String alias) {
        this(DSL.name(alias), DIRECIONAMENTO);
    }

    /**
     * Create an aliased <code>public.direcionamento</code> table reference
     */
    public Direcionamento(Name alias) {
        this(alias, DIRECIONAMENTO);
    }

    private Direcionamento(Name alias, Table<DirecionamentoRecord> aliased) {
        this(alias, aliased, null);
    }

    private Direcionamento(Name alias, Table<DirecionamentoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Direcionamento(Table<O> child, ForeignKey<O, DirecionamentoRecord> key) {
        super(child, key, DIRECIONAMENTO);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<DirecionamentoRecord> getPrimaryKey() {
        return Keys.DIRECIONAMENTO_PKEY;
    }

    @Override
    public List<UniqueKey<DirecionamentoRecord>> getKeys() {
        return Arrays.<UniqueKey<DirecionamentoRecord>>asList(Keys.DIRECIONAMENTO_PKEY);
    }

    @Override
    public List<ForeignKey<DirecionamentoRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DirecionamentoRecord, ?>>asList(Keys.DIRECIONAMENTO__FK_DIRECIONAMENTO___PARTICIPANTE);
    }

    public Participante participante() {
        return new Participante(this, Keys.DIRECIONAMENTO__FK_DIRECIONAMENTO___PARTICIPANTE);
    }

    @Override
    public Direcionamento as(String alias) {
        return new Direcionamento(DSL.name(alias), this);
    }

    @Override
    public Direcionamento as(Name alias) {
        return new Direcionamento(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Direcionamento rename(String name) {
        return new Direcionamento(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Direcionamento rename(Name name) {
        return new Direcionamento(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<UUID, UUID, Integer, String, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
